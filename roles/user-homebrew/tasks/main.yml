- name: Check for unsupported macOS system
  fail:
    msg: 'Homebrew on macOS is only supported on Intel and ARM processors: architecture={{ ansible_architecture }}'
  when: ansible_system == 'Darwin' and ansible_architecture not in ['arm64', 'x86_64']

- name: Check for unsupported Linux system
  fail:
    msg: 'Homebrew on Linux is only supported on Intel processors: architecture={{ ansible_architecture }}'
  when: ansible_system == 'Linux' and ansible_architecture != 'x86_64'

- name: Determine Homebrew directory (Darwin, Apple silicon)
  when: ansible_system == 'Darwin' and ansible_architecture == 'arm64'
  stat: path=/opt/homebrew/bin/brew
  register: brew_path

- name: Determine Homebrew directory (Darwin, Intel silicon)
  when: ansible_system == 'Darwin' and ansible_architecture == 'x86_64'
  stat: path=/usr/local/Homebrew/bin/brew
  register: brew_path

- name: Determine Homebrew directory (Linux)
  when: ansible_system == 'Linux' and ansible_architecture == 'x86_64'
  stat: path=/home/linuxbrew/.linuxbrew/bin/brew
  register: brew_path

- name: Install Homebrew
  when: not brew_path.stat.exists
  vars:
    homebrew_install_script_sudoers_file_path: /etc/sudoers.d/homebrew-install
  block:

  - name: Create temporary file for Homebrew Install Script
    tempfile:
      suffix: .homebrew-install-script
    register: homebrew_install_script_tempfile

  - name: Download Homebrew Install Script to temporary file
    get_url:
      url: https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
      dest: '{{ homebrew_install_script_tempfile.path }}'
      mode: 0755

  - name: Install sudoers file for Homebrew Install Script execution
    become: true
    template:
      src: sudoers
      dest: '{{ homebrew_install_script_sudoers_file_path }}'
    vars:
      username: '{{ ansible_user_id }}'

  - name: Execute the Homebrew Install Script
    command: '{{ homebrew_install_script_tempfile.path }}'
    environment:
      CI: 1

  always:

  - name: Remove Homebrew Install Script temporary file
    file: path='{{ homebrew_install_script_tempfile.path }}' state=absent

  - name: Remove Homebrew Install Script sudoers file
    become: true
    file: path='{{ homebrew_install_script_sudoers_file_path }}' state=absent

- name: Update Homebrew
  command: '{{ brew_path.stat.path }} update --force'
  register: brew_update
  changed_when: '"Already up-to-date" not in brew_update.stderr'

- name: Install packages
  when: brew_packages is defined and brew_packages
  homebrew: name='{{ brew_packages }}' state=present update_homebrew=false
