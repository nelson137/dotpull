################################################################################
# Check for system support & determine the expected installation directory
################################################################################

- name: Check for unsupported macOS system
  fail:
    msg: 'Homebrew on macOS is only supported on Intel and ARM processors: architecture={{ ansible_architecture }}'
  when: ansible_system == 'Darwin' and ansible_architecture not in ['arm64', 'x86_64']

- name: Check for unsupported Linux system
  fail:
    msg: 'Homebrew on Linux is only supported on Intel processors: architecture={{ ansible_architecture }}'
  when: ansible_system == 'Linux' and ansible_architecture != 'x86_64'

- name: Determine Homebrew directory (Darwin, Apple silicon)
  when: ansible_system == 'Darwin' and ansible_architecture == 'arm64'
  set_fact:
    brew_path: /opt/homebrew/bin/brew

- name: Determine Homebrew directory (Darwin, Intel silicon)
  when: ansible_system == 'Darwin' and ansible_architecture == 'x86_64'
  set_fact:
    brew_path: /usr/local/Homebrew/bin/brew

- name: Determine Homebrew directory (Linux)
  when: ansible_system == 'Linux' and ansible_architecture == 'x86_64'
  set_fact:
    brew_path: /home/linuxbrew/.linuxbrew/bin/brew

- name: Check for Homebrew installation
  stat: path='{{ brew_path }}' get_checksum=false get_mime=false
  register: brew_installation

################################################################################
# Install
################################################################################

- name: Install Homebrew
  when: not brew_installation.stat.exists
  vars:
    homebrew_install_sudoers_file_path: /etc/sudoers.d/homebrew-install
  block:

  - name: Create temporary file for Homebrew Install Script
    tempfile:
      suffix: .homebrew-install-script
    register: homebrew_install_script_tempfile

  - name: Download Homebrew Install Script to temporary file
    get_url:
      url: https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh
      dest: '{{ homebrew_install_script_tempfile.path }}'
      mode: '0755'

  - name: Install sudoers file for Homebrew Install Script execution
    become: true
    template: src=sudoers.j2 dest='{{ homebrew_install_sudoers_file_path }}'
    vars:
      username: '{{ ansible_user_id }}'

  - name: Execute the Homebrew Install Script
    command: '{{ homebrew_install_script_tempfile.path }}'
    environment:
      CI: 1

  always:

  - name: Remove Homebrew Install Script temporary file
    file: path='{{ homebrew_install_script_tempfile.path }}' state=absent

  - name: Remove Homebrew Install Script sudoers file
    become: true
    file: path='{{ homebrew_install_sudoers_file_path }}' state=absent

################################################################################
# Update
################################################################################

- name: Update Homebrew
  command: '{{ brew_path }} update --force'
  register: brew_update
  changed_when: '"Already up-to-date" not in brew_update.stderr'

################################################################################
# Install packages
################################################################################

- name: Get the current formula repositories
  command: brew tap
  environment:
    PATH: '/usr/local/bin:/opt/homebrew/bin:/home/linuxbrew/.linuxbrew/bin:{{ ansible_env["PATH"] }}'
    HOMEBREW_NO_AUTO_UPDATE: 1
  changed_when: false
  register: homebrew_tapped_repos

- name: Tap formula repositories
  when: item not in homebrew_tapped_repos.stdout_lines
  command: 'brew tap {{ item }}'
  environment:
    PATH: '/usr/local/bin:/opt/homebrew/bin:/home/linuxbrew/.linuxbrew/bin:{{ ansible_env["PATH"] }}'
    HOMEBREW_NO_AUTO_UPDATE: 1
  loop: '{{ brew_tap | default([]) }}'

- name: Get current brew formula
  command: 'brew list --formula -1'
  environment:
    PATH: '/usr/local/bin:/opt/homebrew/bin:/home/linuxbrew/.linuxbrew/bin:{{ ansible_env["PATH"] }}'
  changed_when: false
  register: homebrew_installed_formula

- name: Install packages
  when: item not in homebrew_installed_formula.stdout_lines
  shell:
    cmd: >
      ulimit -n 20480;
      HOMEBREW_NO_AUTO_UPDATE=1 brew install {{ item }};
  environment:
    PATH: '/usr/local/bin:/opt/homebrew/bin:/home/linuxbrew/.linuxbrew/bin:{{ ansible_env["PATH"] }}'
  loop: '{{ brew_packages | default([]) }}'
